name: MacOS Build
on: push

jobs:
    build_and_test:
        runs-on: macos-14
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            
            - name: Set up Zig
              uses: mlugg/setup-zig@v2
              with:
                version: 0.14.0
            
            - name: Symlink Zig to local bin
              run: |
                mkdir -p $GITHUB_WORKSPACE/zig-bin
                ln -s $(which zig) $GITHUB_WORKSPACE/zig-bin/zig
            
            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Set up Python environment and install package
              run: |
                uv venv --python 3.13
                source .venv/bin/activate
                # Verify we're using the correct Python version
                python --version
                which python
                uv pip install -e .
            
            - name: Run tests
              run: |
                source .venv/bin/activate
                python tests/test_spdx_checker.py

            - name: Install wheel building dependencies
              run: |
                source .venv/bin/activate
                uv pip install build wheel delocate

            - name: Build wheel (ARM64)
              run: |
                source .venv/bin/activate
                export MACOSX_DEPLOYMENT_TARGET=14.7
                export ARCHFLAGS="-arch arm64"
                uv build --wheel

            - name: Alternative wheel repair approach
              run: |
                source .venv/bin/activate
                
                # Verify Python version in build environment
                echo "=== Build environment Python version ==="
                python --version
                which python
                
                # First check what libraries the original wheel needs
                echo "=== Original wheel dependencies ==="
                delocate-listdeps dist/*.whl
                
                # IMPORTANT: Exclude Python framework to prevent version conflicts
                echo "=== Repairing wheel (excluding Python framework) ==="
                delocate-wheel -w wheelhouse -v \
                  --require-archs arm64 \
                  --exclude "*/Python.framework/*" \
                  --exclude "*/libpython*.dylib" \
                  --exclude "*/Python" \
                  dist/*.whl
                
                # Show what we ended up with
                echo "=== Final wheel dependencies ==="
                delocate-listdeps wheelhouse/*.whl || echo "Could not check dependencies"

            - name: Test repaired wheel
              run: |
                source .venv/bin/activate
                export DYLD_PRINT_LIBRARIES=1
                python -X faulthandler -v tests/test_spdx_checker.py

            - name: Debug wheel dependencies before testing
              run: |
                source .venv/bin/activate
                echo "=== Checking wheel dependencies ==="
                delocate-listdeps wheelhouse/*.whl
                
                echo "=== Checking bundled libraries ==="
                unzip -l wheelhouse/*.whl | grep -E '\.(dylib|so)'


            - name: Extract and check .so file
              run: |
                echo "=== Extracting and checking .so file ==="
                unzip -q wheelhouse/*.whl -d temp-wheel
                find temp-wheel -name "*.so" -exec otool -L {} \;
                rm -rf temp-wheel

            - name: Test wheel installation with debugging
              run: |
                uv venv test-env --python 3.13
                source test-env/bin/activate
                
                echo "=== Python version check ==="
                python --version
                python -c "import sys; print(f'Python path: {sys.executable}')"
                
                uv pip install --force-reinstall --no-deps wheelhouse/*.whl
                
                echo "=== Installed package info ==="
                find test-env -name "*spdx_checker*" -type f
                
                echo "=== Testing import with crash debugging ==="
                # Test in stages to isolate the crash
                python -c "print('Python works')" || echo "Python itself crashes"
                python -c "import sys; print('sys import works')" || echo "sys import crashes"
                python -X faulthandler -c "import spdx_checker; print('Import successful!')" || {
                  echo "=== SEGFAULT DETECTED ==="
                  echo "Getting crash info..."
                  # Try to get more info about the crash
                  dmesg | tail -10 || echo "Could not get system crash info"
                }
                python tests/test_spdx_checker.py || {
                  echo "=== TEST CRASH DETECTED ==="
                  echo "Getting crash info..."
                  dmesg | tail -10 || echo "Could not get system crash info"
                }

            - name: Upload wheel as artifact
              uses: actions/upload-artifact@v4
              with:
                name: macos-wheel
                path: ./wheelhouse/*.whl