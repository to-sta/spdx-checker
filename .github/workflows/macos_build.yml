name: MacOS Build
on: push

jobs:
    build_and_test:
        runs-on: macos-14
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            
            - name: Set up Zig
              uses: mlugg/setup-zig@v2
              with:
                version: 0.14.0
            
            - name: Symlink Zig to local bin
              run: |
                mkdir -p $GITHUB_WORKSPACE/zig-bin
                ln -s $(which zig) $GITHUB_WORKSPACE/zig-bin/zig
            
            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Set up Python environment and install package
              run: |
                uv venv --python 3.11
                source .venv/bin/activate
                uv pip install -e .
            
            - name: Run tests
              run: |
                source .venv/bin/activate
                python tests/test_spdx_checker.py

            - name: Install wheel building dependencies
              run: |
                source .venv/bin/activate
                uv pip install build wheel delocate

            - name: Build wheel
              run: |
                source .venv/bin/activate
                export MACOSX_DEPLOYMENT_TARGET=14.7
                export ARCHFLAGS="-arch arm64"
                uv build --wheel

            #  NEW: Test the wheel BEFORE delocate
            - name: Test wheel BEFORE delocate
              run: |
                uv venv pre-delocate-env --python 3.11
                source pre-delocate-env/bin/activate
                uv pip install --force-reinstall --no-deps dist/*.whl
                echo "Testing wheel before delocate..."
                #  Use faulthandler to trace crash
                python -X faulthandler -c "import spdx_checker; print('Imported successfully (pre-delocate)')"
                #  Optional: verbose test output
                python -v tests/test_spdx_checker.py || true  # Allow failure for debug

            - name: Repair wheel with delocate
              run: |
                source .venv/bin/activate
                export MACOSX_DEPLOYMENT_TARGET=14.7
                export ARCHFLAGS="-arch arm64"
                delocate-wheel -w wheelhouse -v --require-archs arm64 --exclude "*/Python" --exclude "*/libpython*.dylib" dist/*.whl

            - name: Test wheel installation (with DYLD_PRINT_LIBRARIES - Post-Delocate)
              run: |
                uv venv test-env --python 3.11
                source test-env/bin/activate
                uv pip install --force-reinstall --no-deps wheelhouse/*.whl

                echo "Running import with DYLD_PRINT_LIBRARIES (post-delocate)"
                DYLD_PRINT_LIBRARIES=1 python -X faulthandler -c "import spdx_checker; print('Wheel installation successful!')"

                echo "Running tests with DYLD_PRINT_LIBRARIES (post-delocate)"
                # This is where the crash occurs, so focus here
                DYLD_PRINT_LIBRARIES=1 python -X faulthandler -v tests/test_spdx_checker.py || true
            
            - name: Re-check .so linkage after delocate
              continue-on-error: true
              run: |
                unzip -d repaired-wheel wheelhouse/*.whl
                find repaired-wheel -name "*.so" -exec otool -L {} \; | grep -i python || echo "No Python dylib linked"
            
            # NEW: Inspect wheel linkage
            - name: Inspect wheel linkage with delocate-listdeps
              run: |
                source .venv/bin/activate
                uv pip install delocate
                delocate-listdeps wheelhouse/*.whl

            # NEW: Inspect architecture of compiled shared object
            - name: Inspect compiled extension architecture
              run: |
                unzip -d wheel-unzipped wheelhouse/*.whl
                find wheel-unzipped -name "*.so" -exec file {} \; || true
                find wheel-unzipped -name "*.so" -exec otool -L {} \; || true

            - name: Test wheel installation
              run: |
                uv venv test-env --python 3.11
                source test-env/bin/activate
                uv pip install --force-reinstall --no-deps wheelhouse/*.whl
                
                # Use faulthandler here as well
                python -X faulthandler -c "import spdx_checker; print('Wheel installation successful!')"
                
                # Run tests (can crash, so allow failure for debug)
                python -v tests/test_spdx_checker.py || true

            - name: List wheel contents (for debugging)
              run: |
                source .venv/bin/activate
                python -m zipfile -l wheelhouse/*.whl

            - name: Upload wheel as artifact
              uses: actions/upload-artifact@v4
              with:
                name: macos-wheel
                path: ./wheelhouse/*.whl
