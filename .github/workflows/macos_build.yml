name: MacOS Build
on: push

jobs:
    build_and_test:
        runs-on: macos-14
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            
            - name: Set up Zig
              uses: mlugg/setup-zig@v2
              with:
                version: 0.14.0
            
            - name: Symlink Zig to local bin
              run: |
                mkdir -p $GITHUB_WORKSPACE/zig-bin
                ln -s $(which zig) $GITHUB_WORKSPACE/zig-bin/zig
            
            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Set up Python environment and install package
              run: |
                uv venv --python 3.11
                source .venv/bin/activate
                uv pip install -e .
            
            - name: Run tests
              run: |
                source .venv/bin/activate
                python tests/test_spdx_checker.py

            - name: Install wheel building dependencies
              run: |
                source .venv/bin/activate
                uv pip install build wheel delocate

            # - name: Build wheel
            #   run: |
            #     source .venv/bin/activate
            #     export MACOSX_DEPLOYMENT_TARGET=14.7
            #     export ARCHFLAGS="-arch arm64"
            #     uv build --wheel

            # ... (your existing setup steps) ...

            - name: Build wheel (ARM64 only)
              run: |
                set -x
                source .venv/bin/activate
                export MACOSX_DEPLOYMENT_TARGET=14.7
                export ARCHFLAGS="-arch arm64"
                uv pip install . --no-deps --no-build-isolation --wheel --wheel-dir dist
                echo "--- Contents of dist/ after build ---"
                ls -lR dist
                echo "--- End of dist/ contents ---"

            - name: Repair wheel with delocate (DEBUG - NO IGNORE)
              run: |
                set -x
                source .venv/bin/activate
                export MACOSX_DEPLOYMENT_TARGET=14.7
                export ARCHFLAGS="-arch arm64"
                delocate-wheel -w wheelhouse -v dist/*.whl
                # Add inspection after delocate-wheel
                echo "--- Contents of wheelhouse/ after delocate ---"
                ls -lR wheelhouse || true # Use || true to prevent failure if directory doesn't exist
                echo "--- End of wheelhouse/ contents ---"

            - name: Inspect delocated .so with otool -L
              run: |
                set -x
                # Find the delocated wheel file (assuming only one .whl file in wheelhouse/)
                WHEEL_FILE=$(find wheelhouse -name "*.whl")
                echo "Found delocated wheel: $WHEEL_FILE"

                # Ensure WHEEL_FILE is not empty before proceeding
                if [ -z "$WHEEL_FILE" ]; then
                  echo "Error: No wheel file found in wheelhouse/."
                  exit 1
                fi

                # Create a temporary directory to unpack the wheel
                UNPACK_DIR=$(mktemp -d delocated-wheel-XXXX)
                echo "Unpacking wheel to: $UNPACK_DIR"
                unzip -q "$WHEEL_FILE" -d "$UNPACK_DIR"

                # Find the .so file within the unpacked directory
                # Adjust this path if spdx_checker.abi3.so is located differently within your package structure
                SO_FILE=$(find "$UNPACK_DIR" -name "spdx_checker.abi3.so")
                if [ -z "$SO_FILE" ]; then
                  echo "Error: spdx_checker.abi3.so not found in unpacked wheel!"
                  echo "Contents of unpacked directory:"
                  ls -R "$UNPACK_DIR"
                  exit 1
                fi
                echo "Found .so file: $SO_FILE"

                echo "--- Output of otool -L ---"
                otool -L "$SO_FILE"
                echo "--- End of otool -L output ---"

                # Clean up the temporary directory
                rm -rf "$UNPACK_DIR"

            - name: Inspect delocated wheel with delocate-listdeps
              run: |
                set -x
                source .venv/bin/activate
                echo "--- Output of delocate-listdeps ---"
                delocate-listdeps wheelhouse/*.whl
                echo "--- End of delocate-listdeps output ---"

            # ... (rest of your workflow) ...


            # - name: Repair wheel with delocate
            #   run: |
            #     source .venv/bin/activate
            #     export MACOSX_DEPLOYMENT_TARGET=14.7
            #     export ARCHFLAGS="-arch arm64"
            #     delocate-wheel -w wheelhouse -v --require-archs arm64 --exclude "*/Python" --exclude "*/libpython*.dylib" dist/*.whl

            - name: Test wheel installation (with DYLD_PRINT_LIBRARIES - Post-Delocate)
              run: |
                uv venv test-env --python 3.11
                source test-env/bin/activate
                uv pip install --force-reinstall --no-deps wheelhouse/*.whl

                echo "Running import with DYLD_PRINT_LIBRARIES (post-delocate)"
                DYLD_PRINT_LIBRARIES=1 python -X faulthandler -c "import spdx_checker; print('Wheel installation successful!')"

                echo "Running tests with DYLD_PRINT_LIBRARIES (post-delocate)"
                # This is where the crash occurs, so focus here
                DYLD_PRINT_LIBRARIES=1 python -X faulthandler -v tests/test_spdx_checker.py || true
            
            - name: Re-check .so linkage after delocate
              continue-on-error: true
              run: |
                unzip -d repaired-wheel wheelhouse/*.whl
                find repaired-wheel -name "*.so" -exec otool -L {} \; | grep -i python || echo "No Python dylib linked"
            
            # NEW: Inspect wheel linkage
            - name: Inspect wheel linkage with delocate-listdeps
              run: |
                source .venv/bin/activate
                uv pip install delocate
                delocate-listdeps wheelhouse/*.whl

            # NEW: Inspect architecture of compiled shared object
            - name: Inspect compiled extension architecture
              run: |
                unzip -d wheel-unzipped wheelhouse/*.whl
                find wheel-unzipped -name "*.so" -exec file {} \; || true
                find wheel-unzipped -name "*.so" -exec otool -L {} \; || true

            - name: Test wheel installation
              run: |
                uv venv test-env --python 3.11
                source test-env/bin/activate
                uv pip install --force-reinstall --no-deps wheelhouse/*.whl
                
                # Use faulthandler here as well
                python -X faulthandler -c "import spdx_checker; print('Wheel installation successful!')"
                
                # Run tests (can crash, so allow failure for debug)
                python -v tests/test_spdx_checker.py || true

            - name: List wheel contents (for debugging)
              run: |
                source .venv/bin/activate
                python -m zipfile -l wheelhouse/*.whl

            - name: Upload wheel as artifact
              uses: actions/upload-artifact@v4
              with:
                name: macos-wheel
                path: ./wheelhouse/*.whl
